<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1440205510000</longProp>
        <longProp name="ThreadGroup.end_time">1440205510000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="maximumValue">10000</stringProp>
          <stringProp name="minimumValue">100</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">RAND</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">username</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">loopcounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">AUTO_DETECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">fpproxy.in.ril.com</stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">false</boolProp>
          <stringProp name="WebDriverConfig.https_host">fpproxy.in.ril.com</stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Tool\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="JioCentral-LoginPage" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;

WDS.sampleResult.sampleStart();

boolean go = true;

//url
String baseUrl = &quot;https://pcrepllica.jiolabs.com/pcdxp&quot;;
WDS.browser.get(baseUrl);
//WDS.browser.get(baseUrl + &quot;/&quot;);
Thread.sleep(3000);

//click on sign-in
WDS.browser.findElement(By.xpath(&quot;/html/body/div[1]/header/nav/div/div[2]/ul/li/a&quot;)).click();
Thread.sleep(3000);


Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${__threadNum}-${loopcounter}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="JioCentral_Credentials" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//domain id
WDS.browser.findElement(By.xpath(&quot;/html/body/div/div[2]/div[1]/form/input[3]&quot;)).sendKeys(new String[] {&quot;jayaprakash.kunchaka&quot;});
Thread.sleep(1000);

//password
WDS.browser.findElement(By.xpath(&quot;/html/body/div/div[2]/div[1]/form/input[4]&quot;)).sendKeys( new String[] { &quot;Krithika@123&quot; } );
Thread.sleep(2000);

//login
WDS.browser.findElement(By.xpath(&quot;//html/body/div/div[2]/div[1]/form/input[5]&quot;)).click();
Thread.sleep(3000);


Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Survey" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click menu
WDS.browser.findElement(By.xpath(&quot;/html/body/div[1]/header/nav/div/button&quot;)).click();
Thread.sleep(2000);
//click survey
WDS.browser.findElement(By.xpath(&quot;/html/body/div[1]/header/nav/div/div[1]/div/ul/li[4]/a&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Survey Admin" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click survey admin
WDS.browser.findElement(By.xpath(&quot;/html/body/div[1]/header/nav/div/div[1]/div/ul/li[4]/ul/li/a&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Group" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click Group
WDS.browser.findElement(By.xpath(&quot;//a[contains(text(),&apos;Groups&apos;)]&quot;)).click();
Thread.sleep(2000);

//click on create Group
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Create Group&apos;)]&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Group-fill details" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//select zones
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;regionCheck&apos;]&quot;)).click();
Thread.sleep(2000);
//select states
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;statesCheck&apos;]&quot;)).click();
Thread.sleep(2000);
//select partner role
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;roleTypeCheck&apos;]&quot;)).click();
Thread.sleep(2000);
//select jio center name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;jioCenterNameCheck&apos;]&quot;)).click();
Thread.sleep(2000);
//select jio partner name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;partnerNameCheck&apos;]&quot;)).click();
Thread.sleep(2000);
//enter name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_name&apos;]&quot;)).sendKeys(new String[] {&quot;NewGrp_${RAND}&quot;});
//enter desc
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_description&apos;]&quot;)).sendKeys(new String[] {&quot;NewGrpdetails_${RAND}&quot;});
Thread.sleep(1000);
//create grp
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Create Group&apos;)]&quot;)).click();
Thread.sleep(4000);

//click on Actions button
WDS.browser.findElement(By.xpath(&quot;//a[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_agentGroupsSearchContainer_1_menu&apos;]&quot;)).click();


//click on Create option
WDS.browser.findElement(By.xpath(&quot;//a[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_agentGroupsSearchContainer__1__menu__create&apos;]&quot;)).click();
Thread.sleep(0300);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Create Survey" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();

//click on survey
WDS.browser.findElement(By.xpath(&quot;/html[1]/body[1]/div[4]/div[2]/div[1]/section[1]/div[1]/div[1]/div[2]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/ul[1]/li[1]/a[1]&quot;)).click();
Thread.sleep(2000);

//click survey admin
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Create Survey&apos;)]&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="fill details2" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.Keys;

WDS.sampleResult.sampleStart();
//name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_name&apos;]&quot;)).sendKeys(new String[]{&quot;jpsurvey_${RAND}&quot;});
Thread.sleep(1000);
//Save survey name
String NewSurveyID=WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_name&apos;]&quot;)).getText();

WDS.log.info(&quot;SurveyID = &quot; + (&quot;jpsurvey_${RAND}&quot;) );

//name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_description&apos;]&quot;)).sendKeys(new String[]{&quot;jpsurveyDescription_${RAND}&quot;});
Thread.sleep(1000);

//Save survey name
String NewSurveyDescription=WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_description&apos;]&quot;)).getText();

//add group
WDS.browser.findElement(By.xpath(&quot;//select[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_agentsGroup&apos;]&quot;)).click();
WDS.browser.findElement(By.xpath(&quot;/html[1]/body[1]/div[4]/div[2]/div[1]/section[1]/div[1]/div[1]/div[2]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/form[1]/fieldset[1]/div[1]/div[5]/div[1]/select[1]/option[2]&quot;)).click();
//start date
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_startDate&apos;]&quot;)).sendKeys(new String[] {&quot;08/23/2022&quot;});
Thread.sleep(1000);
//end date
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_expirationDate&apos;]&quot;)).sendKeys(new String[] {&quot;08/29/2022&quot;});
Thread.sleep(1000);
//create survey
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Create Survey&apos;)]&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">
NewSurveyID=&quot;jpsurvey_${RAND}&quot;;
NewSurveyDescription=&quot;jpsurveyDescription_${RAND}&quot;;



f=new FileOutputStream(&quot;C:/TestCSV/NewCSVFILE.csv&quot;,true);
p=new PrintStream(f); 
this.interpreter.setOut(p); 
print(NewSurveyID + &quot;,&quot;  + NewSurveyDescription);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="fill details2" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.Keys;

WDS.sampleResult.sampleStart();
//name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_name&apos;]&quot;)).sendKeys(new String[]{&quot;jpsurvey_${RAND}&quot;});
Thread.sleep(1000);
//Save survey name
String NewSurveyID=WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_name&apos;]&quot;)).getText();

WDS.log.info(&quot;SurveyID = &quot; + (&quot;jpsurvey_${RAND}&quot;) );

//name
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_description&apos;]&quot;)).sendKeys(new String[]{&quot;jpsurveyDescription_${RAND}&quot;});
Thread.sleep(1000);

//Save survey name
String NewSurveyDescription=WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_description&apos;]&quot;)).getText();

//add group
WDS.browser.findElement(By.xpath(&quot;//select[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_agentsGroup&apos;]&quot;)).click();
WDS.browser.findElement(By.xpath(&quot;/html[1]/body[1]/div[4]/div[2]/div[1]/section[1]/div[1]/div[1]/div[2]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/form[1]/fieldset[1]/div[1]/div[5]/div[1]/select[1]/option[2]&quot;)).click();
//start date
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_startDate&apos;]&quot;)).sendKeys(new String[] {&quot;08/23/2022&quot;});
Thread.sleep(1000);
//end date
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_expirationDate&apos;]&quot;)).sendKeys(new String[] {&quot;08/29/2022&quot;});
Thread.sleep(1000);
//create survey
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Create Survey&apos;)]&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">
NewSurveyID=&quot;jpsurvey_${RAND}&quot;;
NewSurveyDescription=&quot;jpsurveyDescription_${RAND}&quot;;



f=new FileOutputStream(&quot;C:/TestCSV/NewCSVFILE.csv&quot;,true);
p=new PrintStream(f); 
this.interpreter.setOut(p); 
print(NewSurveyID + &quot;,&quot;  + NewSurveyDescription);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Assign question" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();

//click on action
WDS.browser.findElement(By.xpath(&quot;//a[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_surveyFormsSearchContainer_1_menu&apos;]&quot;)).click();
Thread.sleep(2000);

//click on assign quest
WDS.browser.findElement(By.xpath(&quot;//a[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_surveyFormsSearchContainer__1__menu__assign_2d_questions&apos;]&quot;)).click();
Thread.sleep(3000);

//click on add ques
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Add Question&apos;)]&quot;)).click();
Thread.sleep(1000);

//add title
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_title&apos;]&quot;)).sendKeys(new String[] {&quot;rating&quot;});
Thread.sleep(1000);

//quest
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_description&apos;]&quot;)).sendKeys(new String[] {&quot;DO you love jio phones?&quot;});
Thread.sleep(1000);

//type
WDS.browser.findElement(By.xpath(&quot;//select[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_questionType&apos;]&quot;)).click();
WDS.browser.findElement(By.xpath(&quot;//option[contains(text(),&apos;Number&apos;)]&quot;)).click();
Thread.sleep(1000);
//select range
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;rangeCheck&apos;]&quot;)).click();
Thread.sleep(1000);
//start range
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;rangeCheck&apos;]&quot;)).sendKeys(new String[] {&quot;1&quot;});
Thread.sleep(1000);
//end range
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;rangeCheck&apos;]&quot;)).sendKeys(new String[] {&quot;10&quot;});
Thread.sleep(1000);
//submit
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Add Question&apos;)]&quot;)).click();
Thread.sleep(1000);

//click back
WDS.browser.findElement(By.xpath(&quot;//i[@class=&apos;icon-angle-left&apos;]&quot;)).click();
Thread.sleep(4000);



Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Publish survey" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;



WDS.sampleResult.sampleStart();
//click action
WDS.browser.findElement(By.xpath(&quot;//a[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_surveyFormsSearchContainer_1_menu&apos;]&quot;)).click();
Thread.sleep(2000);
//publish
WDS.browser.findElement(By.xpath(&quot;//a[@id=&apos;_com_jio_pc_survey_web_SurveyAdminPortlet_INSTANCE_AwNEHuEyptnB_surveyFormsSearchContainer__1__menu__publish&apos;]&quot;)).click();
Thread.sleep(15000);







Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Signout" enabled="true">
          <stringProp name="WebDriverSampler.script">//import java.io.File;
//import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click user
WDS.browser.findElement(By.xpath(&quot;//header/nav[1]/div[1]/div[2]/ul[1]/li[4]/a[1]/span[1]/i[1]&quot;)).click();
Thread.sleep(2000);

//click on signout
WDS.browser.findElement(By.xpath(&quot;//header/nav[1]/div[1]/div[2]/ul[1]/li[4]/div[1]/a[1]&quot;)).click();
Thread.sleep(2000);

//WDS.browser.executeScript(&quot;return document.querySelector(&apos;body &gt; settings-ui&apos;).shadowRoot.querySelector(&apos;#main&apos;).shadowRoot.querySelector(&apos;settings-basic-page&apos;).shadowRoot.querySelector(&apos;#advancedPage &gt; settings-section:nth-child(1) &gt; settings-privacy-page&apos;).shadowRoot.querySelector(&apos;settings-clear-browsing-data-dialog&apos;).shadowRoot.querySelector(&apos;#clearBrowsingDataConfirm&apos;).click();&quot;);
//WDS.browser.deleteBrowserCookies();

//.browser.close();
//WDS.browser.quit();

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">AUTO_DETECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host">fpproxy.in.ril.com</stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">false</boolProp>
          <stringProp name="WebDriverConfig.https_host">fpproxy.in.ril.com</stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\Users\jayaprakash.kunchaka\Downloads\chromedriver_win32 (5)\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="JioCentral-LoginPage_userend" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;

WDS.sampleResult.sampleStart();

boolean go = true;

//url
String baseUrl = &quot;https://pcrepllica.jiolabs.com/pcdxp&quot;;
WDS.browser.get(baseUrl);
//WDS.browser.get(baseUrl + &quot;/&quot;);
Thread.sleep(3000);

//click on sign-in
WDS.browser.findElement(By.xpath(&quot;/html/body/div[1]/header/nav/div/div[2]/ul/li/a&quot;)).click();
Thread.sleep(5000);


Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${__threadNum}-${loopcounter}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="JioCentral_Credentials_userend" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//domain id
WDS.browser.findElement(By.xpath(&quot;/html/body/div/div[2]/div[1]/form/input[3]&quot;)).sendKeys(new String[]{&quot;0681548112&quot;});
Thread.sleep(1000);

//password
WDS.browser.findElement(By.xpath(&quot;/html/body/div/div[2]/div[1]/form/input[4]&quot;)).sendKeys( new String[] { &quot;Pass%2022&quot; } );
Thread.sleep(2000);

//login
WDS.browser.findElement(By.xpath(&quot;//html/body/div/div[2]/div[1]/form/input[5]&quot;)).click();
Thread.sleep(3000);


Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click Notification" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click menu
WDS.browser.findElement(By.xpath(&quot;/html/body/div[1]/header/nav/div/button&quot;)).click();
Thread.sleep(2000);
//click survey
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Notification&apos;)]&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click survey Notification" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click menu
WDS.browser.findElement(By.xpath(&quot;/html[1]/body[1]/div[1]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/div[3]/form[1]/div[1]/div[2]/div[1]/div[1]/ul[1]/li[1]/div[3]/a[1]/div[2]/b[1]&quot;)).click();
Thread.sleep(2000);


Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

//WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Click survey(new survey)" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//click Survey link
//WDS.browser.findElement(By.xpath(&quot;//a[contains(text(),&apos;new survey&apos;)]&quot;)).click();
WDS.browser.findElement(By.xpath(&quot;/html[1]/body[1]/div[1]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/div[1]/section[1]/div[1]/div[1]/div[1]/div[3]/form[1]/div[1]/div[2]/div[1]/div[1]/ul[1]/li[1]/div[3]/a[1]/div[1]/b[1]&quot;).click();

Thread.sleep(2000);


Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="submit survey(new survey)" enabled="false">
          <stringProp name="WebDriverSampler.script">import java.io.File;
import org.apache.commons.io.FileUtils;
import openqa.selenium.OutputType.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.util.Random;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.WebElement;

WDS.sampleResult.sampleStart();
//rate question 1
WDS.browser.findElement(By.xpath(&quot;//input[@id=&apos;_com_jio_pc_survey_web_SurveyPortlet_INSTANCE_sRIgsIKcAwcC_8171707&apos;]&quot;)).sendKeys(new String[] {&quot;10&quot;});
Thread.sleep(2000);
//rate question 2
WDS.browser.findElement(By.xpath(&quot;//textarea[@id=&apos;_com_jio_pc_survey_web_SurveyPortlet_INSTANCE_sRIgsIKcAwcC_choiceId8171706&apos;]&quot;)).sendKeys(new String[] {&quot;10000&quot;});
Thread.sleep(2000);
//click vote
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;Vote&apos;)]&quot;)).click();
Thread.sleep(2000);

Random r = new Random();
if ( r.nextInt(2) == 0 ){
 File mFile = ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
 FileUtils.copyFile(mFile, new File(&quot;C:/full backup/screenshotsjmeter/&quot; + WDS.name + &quot;-&quot; + WDS.parameters + &quot;.png&quot;));
}

WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters">${username}</stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.reporters.FlexibleFileWriter guiclass="kg.apc.jmeter.reporters.FlexibleFileWriterGui" testclass="kg.apc.jmeter.reporters.FlexibleFileWriter" testname="File Writter - Execution Log" enabled="false">
          <stringProp name="filename">C:\CISCO\apache-jmeter-2.13\bin\Mozaiq\Results\Mozaiq_Func_Auto_Test_Log_${__time(YMD)}.txt</stringProp>
          <stringProp name="columns">Test Start :- \n\n|Test Name:- \t |sampleLabel|\n|RequestData:- \n|requestData|\n|ResponseHeaders:- \n|responseHeaders|\n|ResponseCode:- \t |responseCode|\n|ResponseData:- \n|responseData| \n\nTest End\n-------------------------------------------------------------------------------------------\n\n</stringProp>
          <boolProp name="overwrite">true</boolProp>
          <stringProp name="header">\n\n=================================================================================================================
                             Mozaiq Functional Test Execution Log for Date ----  ${__time(YMD)} .
====================================================================================================================
\n************************** Begine Test Suite Execution **********************************\n
+++++++++++++Test Suite Begin Time:- H${__time(h)} : M${__time(m)} : S${__time(s)}  +++++++++++\n
</stringProp>
          <stringProp name="footer">\n++++++++++Test Suite End Time:- H${__time(h)} : M${__time(m)} : S${__time(s)} ++++++++++
\n************************** End of Test Suite Execution **********************************\n\n</stringProp>
        </kg.apc.jmeter.reporters.FlexibleFileWriter>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\CISCO\apache-jmeter-2.13\bin\Mozaiq\Results\csv_output${__time(YMD)}.csv</stringProp>
          <stringProp name="TestPlan.comments">																				</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
